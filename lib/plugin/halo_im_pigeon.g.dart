// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum Env {
  local,
  dev,
  production,
}

class ClientData {
  ClientData({
    required this.inboxID,
    required this.address,
    required this.installationID,
    required this.dbPath,
  });

  String inboxID;

  String address;

  String installationID;

  String dbPath;

  Object encode() {
    return <Object?>[
      inboxID,
      address,
      installationID,
      dbPath,
    ];
  }

  static ClientData decode(Object result) {
    result as List<Object?>;
    return ClientData(
      inboxID: result[0]! as String,
      address: result[1]! as String,
      installationID: result[2]! as String,
      dbPath: result[3]! as String,
    );
  }
}

class IMDecryptedMessage {
  IMDecryptedMessage({
    required this.id,
    required this.topic,
    required this.contentTypeId,
    required this.content,
    required this.senderAddress,
    required this.sent,
    required this.deliveryStatus,
  });

  String id;

  String topic;

  String contentTypeId;

  Map<String?, Object?> content;

  String senderAddress;

  int sent;

  String deliveryStatus;

  Object encode() {
    return <Object?>[
      id,
      topic,
      contentTypeId,
      content,
      senderAddress,
      sent,
      deliveryStatus,
    ];
  }

  static IMDecryptedMessage decode(Object result) {
    result as List<Object?>;
    return IMDecryptedMessage(
      id: result[0]! as String,
      topic: result[1]! as String,
      contentTypeId: result[2]! as String,
      content: (result[3] as Map<Object?, Object?>?)!.cast<String?, Object?>(),
      senderAddress: result[4]! as String,
      sent: result[5]! as int,
      deliveryStatus: result[6]! as String,
    );
  }
}

class IMConversation {
  IMConversation({
    required this.clientAddress,
    required this.topic,
    required this.peerAddress,
    required this.version,
    required this.createdAt,
    required this.conversationID,
    required this.keyMaterial,
    required this.consentProof,
    required this.isAllowed,
    required this.isDenied,
    this.groupName,
    this.groupDescription,
    this.groupId,
    this.groupIcon,
  });

  String clientAddress;

  String topic;

  String peerAddress;

  String version;

  int createdAt;

  String conversationID;

  String keyMaterial;

  String consentProof;

  bool isAllowed;

  bool isDenied;

  String? groupName;

  String? groupDescription;

  String? groupId;

  String? groupIcon;

  Object encode() {
    return <Object?>[
      clientAddress,
      topic,
      peerAddress,
      version,
      createdAt,
      conversationID,
      keyMaterial,
      consentProof,
      isAllowed,
      isDenied,
      groupName,
      groupDescription,
      groupId,
      groupIcon,
    ];
  }

  static IMConversation decode(Object result) {
    result as List<Object?>;
    return IMConversation(
      clientAddress: result[0]! as String,
      topic: result[1]! as String,
      peerAddress: result[2]! as String,
      version: result[3]! as String,
      createdAt: result[4]! as int,
      conversationID: result[5]! as String,
      keyMaterial: result[6]! as String,
      consentProof: result[7]! as String,
      isAllowed: result[8]! as bool,
      isDenied: result[9]! as bool,
      groupName: result[10] as String?,
      groupDescription: result[11] as String?,
      groupId: result[12] as String?,
      groupIcon: result[13] as String?,
    );
  }
}

class IMMessageReq {
  IMMessageReq({
    required this.topic,
    this.limit,
    this.before,
    this.after,
  });

  String topic;

  int? limit;

  int? before;

  int? after;

  Object encode() {
    return <Object?>[
      topic,
      limit,
      before,
      after,
    ];
  }

  static IMMessageReq decode(Object result) {
    result as List<Object?>;
    return IMMessageReq(
      topic: result[0]! as String,
      limit: result[1] as int?,
      before: result[2] as int?,
      after: result[3] as int?,
    );
  }
}

class IMPushWithMetadata {
  IMPushWithMetadata({
    required this.hmacKeys,
    required this.topic,
  });

  List<IMPushHMACKeys?> hmacKeys;

  String topic;

  Object encode() {
    return <Object?>[
      hmacKeys,
      topic,
    ];
  }

  static IMPushWithMetadata decode(Object result) {
    result as List<Object?>;
    return IMPushWithMetadata(
      hmacKeys: (result[0] as List<Object?>?)!.cast<IMPushHMACKeys?>(),
      topic: result[1]! as String,
    );
  }
}

class IMPushHMACKeys {
  IMPushHMACKeys({
    required this.key,
    required this.key2,
    required this.thirtyDayPeriodsSinceEpoch,
  });

  String key;

  String key2;

  int thirtyDayPeriodsSinceEpoch;

  Object encode() {
    return <Object?>[
      key,
      key2,
      thirtyDayPeriodsSinceEpoch,
    ];
  }

  static IMPushHMACKeys decode(Object result) {
    result as List<Object?>;
    return IMPushHMACKeys(
      key: result[0]! as String,
      key2: result[1]! as String,
      thirtyDayPeriodsSinceEpoch: result[2]! as int,
    );
  }
}

class ImGroup {
  ImGroup({
    required this.clientAddress,
    required this.id,
    required this.createdAt,
    required this.version,
    required this.topic,
    required this.creatorInboxId,
    required this.isActive,
    required this.addedByInboxId,
    required this.name,
    required this.imageUrlSquare,
    required this.description,
    required this.members,
  });

  String clientAddress;

  String id;

  int createdAt;

  String version;

  String topic;

  String creatorInboxId;

  bool isActive;

  String addedByInboxId;

  String name;

  String imageUrlSquare;

  String description;

  List<ImMember?> members;

  Object encode() {
    return <Object?>[
      clientAddress,
      id,
      createdAt,
      version,
      topic,
      creatorInboxId,
      isActive,
      addedByInboxId,
      name,
      imageUrlSquare,
      description,
      members,
    ];
  }

  static ImGroup decode(Object result) {
    result as List<Object?>;
    return ImGroup(
      clientAddress: result[0]! as String,
      id: result[1]! as String,
      createdAt: result[2]! as int,
      version: result[3]! as String,
      topic: result[4]! as String,
      creatorInboxId: result[5]! as String,
      isActive: result[6]! as bool,
      addedByInboxId: result[7]! as String,
      name: result[8]! as String,
      imageUrlSquare: result[9]! as String,
      description: result[10]! as String,
      members: (result[11] as List<Object?>?)!.cast<ImMember?>(),
    );
  }
}

class ImMember {
  ImMember({
    required this.inboxId,
    required this.addresses,
    required this.permissionLevel,
  });

  String inboxId;

  List<String?> addresses;

  ///[member],[admin],[super_admin]
  String permissionLevel;

  Object encode() {
    return <Object?>[
      inboxId,
      addresses,
      permissionLevel,
    ];
  }

  static ImMember decode(Object result) {
    result as List<Object?>;
    return ImMember(
      inboxId: result[0]! as String,
      addresses: (result[1] as List<Object?>?)!.cast<String?>(),
      permissionLevel: result[2]! as String,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Env) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is ClientData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is IMDecryptedMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is IMConversation) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is IMMessageReq) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is IMPushWithMetadata) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is IMPushHMACKeys) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is ImGroup) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is ImMember) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Env.values[value];
      case 130: 
        return ClientData.decode(readValue(buffer)!);
      case 131: 
        return IMDecryptedMessage.decode(readValue(buffer)!);
      case 132: 
        return IMConversation.decode(readValue(buffer)!);
      case 133: 
        return IMMessageReq.decode(readValue(buffer)!);
      case 134: 
        return IMPushWithMetadata.decode(readValue(buffer)!);
      case 135: 
        return IMPushHMACKeys.decode(readValue(buffer)!);
      case 136: 
        return ImGroup.decode(readValue(buffer)!);
      case 137: 
        return ImMember.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class IMHostApi {
  /// Constructor for [IMHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  IMHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  ///用于测试
  Future<void> abc() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.abc$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> createFromKeyBundle({required String keyBundle, required String environment, String? appVersion, bool? hasCreateIdentityCallback, bool? hasEnableIdentityCallback, bool? hasPreAuthenticateToInboxCallback, bool? enableV3, Uint8List? dbEncryptionKey, String? dbDirectory, String? historySyncUrl,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.createFromKeyBundle$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[keyBundle, environment, appVersion, hasCreateIdentityCallback, hasEnableIdentityCallback, hasPreAuthenticateToInboxCallback, enableV3, dbEncryptionKey, dbDirectory, historySyncUrl]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> auth({required String address, required String environment, String? appVersion, bool? hasCreateIdentityCallback, bool? hasEnableIdentityCallback, bool? hasPreAuthenticateToInboxCallback, bool? enableV3, Uint8List? dbEncryptionKey, String? dbDirectory, String? historySyncUrl,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.auth$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[address, environment, appVersion, hasCreateIdentityCallback, hasEnableIdentityCallback, hasPreAuthenticateToInboxCallback, enableV3, dbEncryptionKey, dbDirectory, historySyncUrl]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  ///创建会话
  Future<IMConversation> createConversation(String inboxId, String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.createConversation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, address]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as IMConversation?)!;
    }
  }

  /// 发送消息
  /// TODO 目前只支持文字类型，其他类型还未支持
  Future<String> sendMessage(String inboxId, String topic, String body) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.sendMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topic, body]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  ///订阅新的会话
  Future<void> subscribeToConversations(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.subscribeToConversations$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///取消订阅新的会话
  Future<void> unsubscribeToConversations(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToConversations$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///订阅会话新消息
  Future<void> subscribeToMessages(String inboxId, String topic) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.subscribeToMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topic]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///取消订阅会话新消息
  Future<void> unsubscribeToMessages(String inboxId, String topic) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topic]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///订阅所有会话新消息
  Future<void> subscribeToAllMessages(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.subscribeToAllMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///取消订阅所有会话新消息
  Future<void> unsubscribeToAllMessages(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToAllMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///订阅所有群新消息
  Future<void> subscribeToAllGroupMessages(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.subscribeToAllGroupMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///取消订阅所有群新消息
  Future<void> unsubscribeToAllGroupMessages(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToAllGroupMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///是否可以与[address]发消息
  Future<bool> canMessage(String inboxId, String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.canMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, address]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  ///[address]是否激活
  Future<bool> staticCanMessage(String address, String appVersion) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.staticCanMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[address, appVersion]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  ///获取会话列表
  Future<List<IMConversation?>> conversationList(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.conversationList$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<IMConversation?>();
    }
  }

  ///获取会话历史消息
  Future<List<IMDecryptedMessage?>> loadMessages({required String inboxId, required String topic, int? limit = 20, int? before, int? after, String? direction = 'SORT_DIRECTION_DESCENDING',}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.loadMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topic, limit, before, after, direction]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<IMDecryptedMessage?>();
    }
  }

  Future<List<IMDecryptedMessage?>> loadBatchMessages({required String inboxId, required List<IMMessageReq?> topics, String? direction = 'SORT_DIRECTION_DESCENDING',}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.loadBatchMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topics, direction]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<IMDecryptedMessage?>();
    }
  }

  Future<void> allowContacts(String inboxId, List<String?> addresses) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.allowContacts$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, addresses]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> denyContacts(String inboxId, List<String?> addresses) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.denyContacts$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, addresses]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isAllowed(String inboxId, String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.isAllowed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, address]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isDenied(String inboxId, String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.isDenied$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, address]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> allowGroups(String inboxId, List<String?> groupIds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.allowGroups$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, groupIds]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> denyGroups(String inboxId, List<String?> groupIds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.denyGroups$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, groupIds]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isGroupAllowed(String inboxId, String groupId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.isGroupAllowed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, groupId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isGroupDenied(String inboxId, String groupId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.isGroupDenied$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, groupId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> refreshConsentList(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.refreshConsentList$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// 创建注册push
  /// [token] device id
  /// 返回 installationId
  Future<String> registerPushToken(String pushServer, String token) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.registerPushToken$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[pushServer, token]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  ///订阅推送Topics
  Future<void> subscribePushTopics(String inboxId, List<String?> topics) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.subscribePushTopics$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topics]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///订阅推送Topics
  Future<void> subscribePushWithMetadata(String inboxId, List<String?> topics) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.subscribePushWithMetadata$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topics]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<IMPushWithMetadata?>> getPushWithMetadata(String inboxId, List<String?> topics) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.getPushWithMetadata$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topics]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<IMPushWithMetadata?>();
    }
  }

  /// 注销推送，注销或切换帐户时使用
  /// PS：删除installationId
  Future<void> deleteInstallationPush() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.deleteInstallationPush$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  ///解密消息（用于推送接收等场景）
  Future<IMDecryptedMessage> decodeMessage(String inboxId, String topic, String encryptedMessage) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.decodeMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, topic, encryptedMessage]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as IMDecryptedMessage?)!;
    }
  }

  ///静音（取消订阅推送Topics）
  Future<void> unsubscribePushTopics(List<String?> topics) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.unsubscribePushTopics$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[topics]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> receiveSignature(String requestId, String signature) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.receiveSignature$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[requestId, signature]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> exportKeyBundle(String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.exportKeyBundle$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  ///是否可以使用群聊
  Future<Map<String?, bool?>> canGroupMessage(String inboxId, List<String?> peerAddresses) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.canGroupMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, peerAddresses]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String?, bool?>();
    }
  }

  ///创建群
  Future<ImGroup> createGroup(String inboxId, List<String?> peerAddresses, String permission, String groupOptionsJson) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.createGroup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, peerAddresses, permission, groupOptionsJson]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ImGroup?)!;
    }
  }

  Future<ImGroup?> findGroup(String inboxId, String groupId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.findGroup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[inboxId, groupId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as ImGroup?);
    }
  }

  Future<bool> isAdmin(String clientInboxId, String groupId, String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.isAdmin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isSuperAdmin(String clientInboxId, String groupId, String inboxId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.isSuperAdmin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> updateGroupName(String clientInboxId, String groupId, String groupName) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.updateGroupName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, groupName]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateGroupImageUrlSquare(String clientInboxId, String groupId, String groupImageUrl) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.updateGroupImageUrlSquare$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, groupImageUrl]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> syncGroup(String clientInboxId, String groupId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.syncGroup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addGroupMembers(String clientInboxId, String groupId, List<String?> peerAddresses) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.addGroupMembers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, peerAddresses]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addAdmin({required String clientInboxId, required String groupId, required String inboxId,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.addAdmin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeAdmin({required String clientInboxId, required String groupId, required String inboxId,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.removeAdmin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, inboxId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeGroupMembers({required String clientInboxId, required String groupId, required List<String?> addresses,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.removeGroupMembers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId, addresses]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> conversationConsentState(String clientInboxId, String conversationTopic) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.conversationConsentState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, conversationTopic]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> groupConsentState(String clientInboxId, String groupId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.halo_im.IMHostApi.groupConsentState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clientInboxId, groupId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }
}

abstract class IMFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  ///用于测试
  void flutterApiTest(String test);

  ///新会话响应
  void onSubscribeToConversations(String inboxId, IMConversation conversation);

  ///会话新消息响应
  void onSubscribeToMessages(String inboxId, IMDecryptedMessage message);

  ///所有新消息响应
  void onSubscribeToAllMessages(String inboxId, IMDecryptedMessage message);

  ///消息签名
  void onSignMessage(String requestId, String message);

  static void setUp(IMFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.halo_im.IMFlutterApi.flutterApiTest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.flutterApiTest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_test = (args[0] as String?);
          assert(arg_test != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.flutterApiTest was null, expected non-null String.');
          try {
            api.flutterApiTest(arg_test!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToConversations$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToConversations was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_inboxId = (args[0] as String?);
          assert(arg_inboxId != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToConversations was null, expected non-null String.');
          final IMConversation? arg_conversation = (args[1] as IMConversation?);
          assert(arg_conversation != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToConversations was null, expected non-null IMConversation.');
          try {
            api.onSubscribeToConversations(arg_inboxId!, arg_conversation!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToMessages$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToMessages was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_inboxId = (args[0] as String?);
          assert(arg_inboxId != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToMessages was null, expected non-null String.');
          final IMDecryptedMessage? arg_message = (args[1] as IMDecryptedMessage?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToMessages was null, expected non-null IMDecryptedMessage.');
          try {
            api.onSubscribeToMessages(arg_inboxId!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToAllMessages$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToAllMessages was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_inboxId = (args[0] as String?);
          assert(arg_inboxId != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToAllMessages was null, expected non-null String.');
          final IMDecryptedMessage? arg_message = (args[1] as IMDecryptedMessage?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToAllMessages was null, expected non-null IMDecryptedMessage.');
          try {
            api.onSubscribeToAllMessages(arg_inboxId!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.halo_im.IMFlutterApi.onSignMessage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSignMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_requestId = (args[0] as String?);
          assert(arg_requestId != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSignMessage was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.halo_im.IMFlutterApi.onSignMessage was null, expected non-null String.');
          try {
            api.onSignMessage(arg_requestId!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
