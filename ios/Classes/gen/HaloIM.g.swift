// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum Env: Int {
  case local = 0
  case dev = 1
  case production = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientData {
  var inboxID: String
  var address: String
  var installationID: String
  var dbPath: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientData? {
    let inboxID = pigeonVar_list[0] as! String
    let address = pigeonVar_list[1] as! String
    let installationID = pigeonVar_list[2] as! String
    let dbPath = pigeonVar_list[3] as! String

    return ClientData(
      inboxID: inboxID,
      address: address,
      installationID: installationID,
      dbPath: dbPath
    )
  }
  func toList() -> [Any?] {
    return [
      inboxID,
      address,
      installationID,
      dbPath,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IMDecryptedMessage {
  var id: String
  var topic: String
  var contentTypeId: String
  var content: [String?: Any?]
  var senderAddress: String
  var sent: Int64
  var deliveryStatus: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IMDecryptedMessage? {
    let id = pigeonVar_list[0] as! String
    let topic = pigeonVar_list[1] as! String
    let contentTypeId = pigeonVar_list[2] as! String
    let content = pigeonVar_list[3] as! [String?: Any?]
    let senderAddress = pigeonVar_list[4] as! String
    let sent = pigeonVar_list[5] as! Int64
    let deliveryStatus = pigeonVar_list[6] as! String

    return IMDecryptedMessage(
      id: id,
      topic: topic,
      contentTypeId: contentTypeId,
      content: content,
      senderAddress: senderAddress,
      sent: sent,
      deliveryStatus: deliveryStatus
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      topic,
      contentTypeId,
      content,
      senderAddress,
      sent,
      deliveryStatus,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IMConversation {
  var clientAddress: String
  var topic: String
  var peerAddress: String
  var version: String
  var createdAt: Int64
  var conversationID: String
  var keyMaterial: String
  var consentProof: String
  var isAllowed: Bool
  var isDenied: Bool
  var groupName: String? = nil
  var groupDescription: String? = nil
  var groupId: String? = nil
  var groupIcon: String? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IMConversation? {
    let clientAddress = pigeonVar_list[0] as! String
    let topic = pigeonVar_list[1] as! String
    let peerAddress = pigeonVar_list[2] as! String
    let version = pigeonVar_list[3] as! String
    let createdAt = pigeonVar_list[4] as! Int64
    let conversationID = pigeonVar_list[5] as! String
    let keyMaterial = pigeonVar_list[6] as! String
    let consentProof = pigeonVar_list[7] as! String
    let isAllowed = pigeonVar_list[8] as! Bool
    let isDenied = pigeonVar_list[9] as! Bool
    let groupName: String? = nilOrValue(pigeonVar_list[10])
    let groupDescription: String? = nilOrValue(pigeonVar_list[11])
    let groupId: String? = nilOrValue(pigeonVar_list[12])
    let groupIcon: String? = nilOrValue(pigeonVar_list[13])

    return IMConversation(
      clientAddress: clientAddress,
      topic: topic,
      peerAddress: peerAddress,
      version: version,
      createdAt: createdAt,
      conversationID: conversationID,
      keyMaterial: keyMaterial,
      consentProof: consentProof,
      isAllowed: isAllowed,
      isDenied: isDenied,
      groupName: groupName,
      groupDescription: groupDescription,
      groupId: groupId,
      groupIcon: groupIcon
    )
  }
  func toList() -> [Any?] {
    return [
      clientAddress,
      topic,
      peerAddress,
      version,
      createdAt,
      conversationID,
      keyMaterial,
      consentProof,
      isAllowed,
      isDenied,
      groupName,
      groupDescription,
      groupId,
      groupIcon,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IMMessageReq {
  var topic: String
  var limit: Int64? = nil
  var before: Int64? = nil
  var after: Int64? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IMMessageReq? {
    let topic = pigeonVar_list[0] as! String
    let limit: Int64? = nilOrValue(pigeonVar_list[1])
    let before: Int64? = nilOrValue(pigeonVar_list[2])
    let after: Int64? = nilOrValue(pigeonVar_list[3])

    return IMMessageReq(
      topic: topic,
      limit: limit,
      before: before,
      after: after
    )
  }
  func toList() -> [Any?] {
    return [
      topic,
      limit,
      before,
      after,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IMPushWithMetadata {
  var hmacKeys: [IMPushHMACKeys?]
  var topic: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IMPushWithMetadata? {
    let hmacKeys = pigeonVar_list[0] as! [IMPushHMACKeys?]
    let topic = pigeonVar_list[1] as! String

    return IMPushWithMetadata(
      hmacKeys: hmacKeys,
      topic: topic
    )
  }
  func toList() -> [Any?] {
    return [
      hmacKeys,
      topic,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IMPushHMACKeys {
  var key: String
  var key2: String
  var thirtyDayPeriodsSinceEpoch: Int64



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IMPushHMACKeys? {
    let key = pigeonVar_list[0] as! String
    let key2 = pigeonVar_list[1] as! String
    let thirtyDayPeriodsSinceEpoch = pigeonVar_list[2] as! Int64

    return IMPushHMACKeys(
      key: key,
      key2: key2,
      thirtyDayPeriodsSinceEpoch: thirtyDayPeriodsSinceEpoch
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      key2,
      thirtyDayPeriodsSinceEpoch,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ImGroup {
  var clientAddress: String
  var id: String
  var createdAt: Int64
  var version: String
  var topic: String
  var creatorInboxId: String
  var isActive: Bool
  var addedByInboxId: String
  var name: String
  var imageUrlSquare: String
  var description: String
  var members: [ImMember?]



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ImGroup? {
    let clientAddress = pigeonVar_list[0] as! String
    let id = pigeonVar_list[1] as! String
    let createdAt = pigeonVar_list[2] as! Int64
    let version = pigeonVar_list[3] as! String
    let topic = pigeonVar_list[4] as! String
    let creatorInboxId = pigeonVar_list[5] as! String
    let isActive = pigeonVar_list[6] as! Bool
    let addedByInboxId = pigeonVar_list[7] as! String
    let name = pigeonVar_list[8] as! String
    let imageUrlSquare = pigeonVar_list[9] as! String
    let description = pigeonVar_list[10] as! String
    let members = pigeonVar_list[11] as! [ImMember?]

    return ImGroup(
      clientAddress: clientAddress,
      id: id,
      createdAt: createdAt,
      version: version,
      topic: topic,
      creatorInboxId: creatorInboxId,
      isActive: isActive,
      addedByInboxId: addedByInboxId,
      name: name,
      imageUrlSquare: imageUrlSquare,
      description: description,
      members: members
    )
  }
  func toList() -> [Any?] {
    return [
      clientAddress,
      id,
      createdAt,
      version,
      topic,
      creatorInboxId,
      isActive,
      addedByInboxId,
      name,
      imageUrlSquare,
      description,
      members,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ImMember {
  var inboxId: String
  var addresses: [String?]
  ///[member],[admin],[super_admin]
  var permissionLevel: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ImMember? {
    let inboxId = pigeonVar_list[0] as! String
    let addresses = pigeonVar_list[1] as! [String?]
    let permissionLevel = pigeonVar_list[2] as! String

    return ImMember(
      inboxId: inboxId,
      addresses: addresses,
      permissionLevel: permissionLevel
    )
  }
  func toList() -> [Any?] {
    return [
      inboxId,
      addresses,
      permissionLevel,
    ]
  }
}

private class HaloIMPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Env(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return ClientData.fromList(self.readValue() as! [Any?])
    case 131:
      return IMDecryptedMessage.fromList(self.readValue() as! [Any?])
    case 132:
      return IMConversation.fromList(self.readValue() as! [Any?])
    case 133:
      return IMMessageReq.fromList(self.readValue() as! [Any?])
    case 134:
      return IMPushWithMetadata.fromList(self.readValue() as! [Any?])
    case 135:
      return IMPushHMACKeys.fromList(self.readValue() as! [Any?])
    case 136:
      return ImGroup.fromList(self.readValue() as! [Any?])
    case 137:
      return ImMember.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class HaloIMPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Env {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ClientData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? IMDecryptedMessage {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? IMConversation {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? IMMessageReq {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? IMPushWithMetadata {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? IMPushHMACKeys {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? ImGroup {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? ImMember {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HaloIMPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HaloIMPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HaloIMPigeonCodecWriter(data: data)
  }
}

class HaloIMPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = HaloIMPigeonCodec(readerWriter: HaloIMPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IMHostApi {
  ///用于测试
  func abc() throws
  func createFromKeyBundle(keyBundle: String, environment: String, appVersion: String?, hasCreateIdentityCallback: Bool?, hasEnableIdentityCallback: Bool?, hasPreAuthenticateToInboxCallback: Bool?, enableV3: Bool?, dbEncryptionKey: FlutterStandardTypedData?, dbDirectory: String?, historySyncUrl: String?, completion: @escaping (Result<String, Error>) -> Void)
  func auth(address: String, environment: String, appVersion: String?, hasCreateIdentityCallback: Bool?, hasEnableIdentityCallback: Bool?, hasPreAuthenticateToInboxCallback: Bool?, enableV3: Bool?, dbEncryptionKey: FlutterStandardTypedData?, dbDirectory: String?, historySyncUrl: String?, completion: @escaping (Result<String, Error>) -> Void)
  ///创建会话
  func createConversation(inboxId: String, address: String, completion: @escaping (Result<IMConversation, Error>) -> Void)
  /// 发送消息
  /// TODO 目前只支持文字类型，其他类型还未支持
  func sendMessage(inboxId: String, topic: String, body: String, completion: @escaping (Result<String, Error>) -> Void)
  ///订阅新的会话
  func subscribeToConversations(inboxId: String) throws
  ///取消订阅新的会话
  func unsubscribeToConversations(inboxId: String) throws
  ///订阅会话新消息
  func subscribeToMessages(inboxId: String, topic: String) throws
  ///取消订阅会话新消息
  func unsubscribeToMessages(inboxId: String, topic: String) throws
  ///订阅所有会话新消息
  func subscribeToAllMessages(inboxId: String) throws
  ///取消订阅所有会话新消息
  func unsubscribeToAllMessages(inboxId: String) throws
  ///订阅所有群新消息
  func subscribeToAllGroupMessages(inboxId: String) throws
  ///取消订阅所有群新消息
  func unsubscribeToAllGroupMessages(inboxId: String) throws
  ///是否可以与[address]发消息
  func canMessage(inboxId: String, address: String, completion: @escaping (Result<Bool, Error>) -> Void)
  ///[address]是否激活
  func staticCanMessage(address: String, appVersion: String, completion: @escaping (Result<Bool, Error>) -> Void)
  ///获取会话列表
  func conversationList(inboxId: String, completion: @escaping (Result<[IMConversation], Error>) -> Void)
  ///获取会话历史消息
  func loadMessages(inboxId: String, topic: String, limit: Int64?, before: Int64?, after: Int64?, direction: String?, completion: @escaping (Result<[IMDecryptedMessage], Error>) -> Void)
  func loadBatchMessages(inboxId: String, topics: [IMMessageReq], direction: String?, completion: @escaping (Result<[IMDecryptedMessage], Error>) -> Void)
  func allowContacts(inboxId: String, addresses: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func denyContacts(inboxId: String, addresses: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func isAllowed(inboxId: String, address: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func isDenied(inboxId: String, address: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func allowGroups(inboxId: String, groupIds: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func denyGroups(inboxId: String, groupIds: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func isGroupAllowed(inboxId: String, groupId: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func isGroupDenied(inboxId: String, groupId: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func refreshConsentList(inboxId: String) throws
  /// 创建注册push
  /// [token] device id
  /// 返回 installationId
  func registerPushToken(pushServer: String, token: String, completion: @escaping (Result<String, Error>) -> Void)
  ///订阅推送Topics
  func subscribePushTopics(inboxId: String, topics: [String]) throws
  ///订阅推送Topics
  func subscribePushWithMetadata(inboxId: String, topics: [String]) throws
  func getPushWithMetadata(inboxId: String, topics: [String], completion: @escaping (Result<[IMPushWithMetadata], Error>) -> Void)
  /// 注销推送，注销或切换帐户时使用
  /// PS：删除installationId
  func deleteInstallationPush() throws
  ///解密消息（用于推送接收等场景）
  func decodeMessage(inboxId: String, topic: String, encryptedMessage: String, completion: @escaping (Result<IMDecryptedMessage, Error>) -> Void)
  ///静音（取消订阅推送Topics）
  func unsubscribePushTopics(topics: [String]) throws
  func receiveSignature(requestId: String, signature: String) throws
  func exportKeyBundle(inboxId: String, completion: @escaping (Result<String, Error>) -> Void)
  ///是否可以使用群聊
  func canGroupMessage(inboxId: String, peerAddresses: [String], completion: @escaping (Result<[String: Bool], Error>) -> Void)
  ///创建群
  func createGroup(inboxId: String, peerAddresses: [String], permission: String, groupOptionsJson: String, completion: @escaping (Result<ImGroup, Error>) -> Void)
  func findGroup(inboxId: String, groupId: String, completion: @escaping (Result<ImGroup?, Error>) -> Void)
  func isAdmin(clientInboxId: String, groupId: String, inboxId: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func isSuperAdmin(clientInboxId: String, groupId: String, inboxId: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func updateGroupName(clientInboxId: String, groupId: String, groupName: String, completion: @escaping (Result<Void, Error>) -> Void)
  func updateGroupImageUrlSquare(clientInboxId: String, groupId: String, groupImageUrl: String, completion: @escaping (Result<Void, Error>) -> Void)
  func syncGroup(clientInboxId: String, groupId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func addGroupMembers(clientInboxId: String, groupId: String, peerAddresses: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func addAdmin(clientInboxId: String, groupId: String, inboxId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func removeAdmin(clientInboxId: String, groupId: String, inboxId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func removeGroupMembers(clientInboxId: String, groupId: String, addresses: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func conversationConsentState(clientInboxId: String, conversationTopic: String, completion: @escaping (Result<String, Error>) -> Void)
  func groupConsentState(clientInboxId: String, groupId: String, completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IMHostApiSetup {
  static var codec: FlutterStandardMessageCodec { HaloIMPigeonCodec.shared }
  /// Sets up an instance of `IMHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IMHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    ///用于测试
    let abcChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.abc\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      abcChannel.setMessageHandler { _, reply in
        do {
          try api.abc()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      abcChannel.setMessageHandler(nil)
    }
    let createFromKeyBundleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.createFromKeyBundle\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createFromKeyBundleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyBundleArg = args[0] as! String
        let environmentArg = args[1] as! String
        let appVersionArg: String? = nilOrValue(args[2])
        let hasCreateIdentityCallbackArg: Bool? = nilOrValue(args[3])
        let hasEnableIdentityCallbackArg: Bool? = nilOrValue(args[4])
        let hasPreAuthenticateToInboxCallbackArg: Bool? = nilOrValue(args[5])
        let enableV3Arg: Bool? = nilOrValue(args[6])
        let dbEncryptionKeyArg: FlutterStandardTypedData? = nilOrValue(args[7])
        let dbDirectoryArg: String? = nilOrValue(args[8])
        let historySyncUrlArg: String? = nilOrValue(args[9])
        api.createFromKeyBundle(keyBundle: keyBundleArg, environment: environmentArg, appVersion: appVersionArg, hasCreateIdentityCallback: hasCreateIdentityCallbackArg, hasEnableIdentityCallback: hasEnableIdentityCallbackArg, hasPreAuthenticateToInboxCallback: hasPreAuthenticateToInboxCallbackArg, enableV3: enableV3Arg, dbEncryptionKey: dbEncryptionKeyArg, dbDirectory: dbDirectoryArg, historySyncUrl: historySyncUrlArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createFromKeyBundleChannel.setMessageHandler(nil)
    }
    let authChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.auth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let addressArg = args[0] as! String
        let environmentArg = args[1] as! String
        let appVersionArg: String? = nilOrValue(args[2])
        let hasCreateIdentityCallbackArg: Bool? = nilOrValue(args[3])
        let hasEnableIdentityCallbackArg: Bool? = nilOrValue(args[4])
        let hasPreAuthenticateToInboxCallbackArg: Bool? = nilOrValue(args[5])
        let enableV3Arg: Bool? = nilOrValue(args[6])
        let dbEncryptionKeyArg: FlutterStandardTypedData? = nilOrValue(args[7])
        let dbDirectoryArg: String? = nilOrValue(args[8])
        let historySyncUrlArg: String? = nilOrValue(args[9])
        api.auth(address: addressArg, environment: environmentArg, appVersion: appVersionArg, hasCreateIdentityCallback: hasCreateIdentityCallbackArg, hasEnableIdentityCallback: hasEnableIdentityCallbackArg, hasPreAuthenticateToInboxCallback: hasPreAuthenticateToInboxCallbackArg, enableV3: enableV3Arg, dbEncryptionKey: dbEncryptionKeyArg, dbDirectory: dbDirectoryArg, historySyncUrl: historySyncUrlArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authChannel.setMessageHandler(nil)
    }
    ///创建会话
    let createConversationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.createConversation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createConversationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let addressArg = args[1] as! String
        api.createConversation(inboxId: inboxIdArg, address: addressArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createConversationChannel.setMessageHandler(nil)
    }
    /// 发送消息
    /// TODO 目前只支持文字类型，其他类型还未支持
    let sendMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.sendMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicArg = args[1] as! String
        let bodyArg = args[2] as! String
        api.sendMessage(inboxId: inboxIdArg, topic: topicArg, body: bodyArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendMessageChannel.setMessageHandler(nil)
    }
    ///订阅新的会话
    let subscribeToConversationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToConversations\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeToConversationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.subscribeToConversations(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeToConversationsChannel.setMessageHandler(nil)
    }
    ///取消订阅新的会话
    let unsubscribeToConversationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToConversations\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribeToConversationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.unsubscribeToConversations(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribeToConversationsChannel.setMessageHandler(nil)
    }
    ///订阅会话新消息
    let subscribeToMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeToMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicArg = args[1] as! String
        do {
          try api.subscribeToMessages(inboxId: inboxIdArg, topic: topicArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeToMessagesChannel.setMessageHandler(nil)
    }
    ///取消订阅会话新消息
    let unsubscribeToMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribeToMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicArg = args[1] as! String
        do {
          try api.unsubscribeToMessages(inboxId: inboxIdArg, topic: topicArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribeToMessagesChannel.setMessageHandler(nil)
    }
    ///订阅所有会话新消息
    let subscribeToAllMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToAllMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeToAllMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.subscribeToAllMessages(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeToAllMessagesChannel.setMessageHandler(nil)
    }
    ///取消订阅所有会话新消息
    let unsubscribeToAllMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToAllMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribeToAllMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.unsubscribeToAllMessages(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribeToAllMessagesChannel.setMessageHandler(nil)
    }
    ///订阅所有群新消息
    let subscribeToAllGroupMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToAllGroupMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeToAllGroupMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.subscribeToAllGroupMessages(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeToAllGroupMessagesChannel.setMessageHandler(nil)
    }
    ///取消订阅所有群新消息
    let unsubscribeToAllGroupMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToAllGroupMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribeToAllGroupMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.unsubscribeToAllGroupMessages(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribeToAllGroupMessagesChannel.setMessageHandler(nil)
    }
    ///是否可以与[address]发消息
    let canMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.canMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let addressArg = args[1] as! String
        api.canMessage(inboxId: inboxIdArg, address: addressArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      canMessageChannel.setMessageHandler(nil)
    }
    ///[address]是否激活
    let staticCanMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.staticCanMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      staticCanMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let addressArg = args[0] as! String
        let appVersionArg = args[1] as! String
        api.staticCanMessage(address: addressArg, appVersion: appVersionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      staticCanMessageChannel.setMessageHandler(nil)
    }
    ///获取会话列表
    let conversationListChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.conversationList\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      conversationListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        api.conversationList(inboxId: inboxIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      conversationListChannel.setMessageHandler(nil)
    }
    ///获取会话历史消息
    let loadMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.loadMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loadMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicArg = args[1] as! String
        let limitArg: Int64? = nilOrValue(args[2])
        let beforeArg: Int64? = nilOrValue(args[3])
        let afterArg: Int64? = nilOrValue(args[4])
        let directionArg: String? = nilOrValue(args[5])
        api.loadMessages(inboxId: inboxIdArg, topic: topicArg, limit: limitArg, before: beforeArg, after: afterArg, direction: directionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      loadMessagesChannel.setMessageHandler(nil)
    }
    let loadBatchMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.loadBatchMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loadBatchMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicsArg = args[1] as! [IMMessageReq]
        let directionArg: String? = nilOrValue(args[2])
        api.loadBatchMessages(inboxId: inboxIdArg, topics: topicsArg, direction: directionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      loadBatchMessagesChannel.setMessageHandler(nil)
    }
    let allowContactsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.allowContacts\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allowContactsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let addressesArg = args[1] as! [String]
        api.allowContacts(inboxId: inboxIdArg, addresses: addressesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      allowContactsChannel.setMessageHandler(nil)
    }
    let denyContactsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.denyContacts\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      denyContactsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let addressesArg = args[1] as! [String]
        api.denyContacts(inboxId: inboxIdArg, addresses: addressesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      denyContactsChannel.setMessageHandler(nil)
    }
    let isAllowedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.isAllowed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isAllowedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let addressArg = args[1] as! String
        api.isAllowed(inboxId: inboxIdArg, address: addressArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isAllowedChannel.setMessageHandler(nil)
    }
    let isDeniedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.isDenied\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDeniedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let addressArg = args[1] as! String
        api.isDenied(inboxId: inboxIdArg, address: addressArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isDeniedChannel.setMessageHandler(nil)
    }
    let allowGroupsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.allowGroups\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allowGroupsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let groupIdsArg = args[1] as! [String]
        api.allowGroups(inboxId: inboxIdArg, groupIds: groupIdsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      allowGroupsChannel.setMessageHandler(nil)
    }
    let denyGroupsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.denyGroups\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      denyGroupsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let groupIdsArg = args[1] as! [String]
        api.denyGroups(inboxId: inboxIdArg, groupIds: groupIdsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      denyGroupsChannel.setMessageHandler(nil)
    }
    let isGroupAllowedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.isGroupAllowed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isGroupAllowedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        api.isGroupAllowed(inboxId: inboxIdArg, groupId: groupIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isGroupAllowedChannel.setMessageHandler(nil)
    }
    let isGroupDeniedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.isGroupDenied\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isGroupDeniedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        api.isGroupDenied(inboxId: inboxIdArg, groupId: groupIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isGroupDeniedChannel.setMessageHandler(nil)
    }
    let refreshConsentListChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.refreshConsentList\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      refreshConsentListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        do {
          try api.refreshConsentList(inboxId: inboxIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      refreshConsentListChannel.setMessageHandler(nil)
    }
    /// 创建注册push
    /// [token] device id
    /// 返回 installationId
    let registerPushTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.registerPushToken\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerPushTokenChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pushServerArg = args[0] as! String
        let tokenArg = args[1] as! String
        api.registerPushToken(pushServer: pushServerArg, token: tokenArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      registerPushTokenChannel.setMessageHandler(nil)
    }
    ///订阅推送Topics
    let subscribePushTopicsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.subscribePushTopics\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribePushTopicsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicsArg = args[1] as! [String]
        do {
          try api.subscribePushTopics(inboxId: inboxIdArg, topics: topicsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribePushTopicsChannel.setMessageHandler(nil)
    }
    ///订阅推送Topics
    let subscribePushWithMetadataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.subscribePushWithMetadata\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribePushWithMetadataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicsArg = args[1] as! [String]
        do {
          try api.subscribePushWithMetadata(inboxId: inboxIdArg, topics: topicsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribePushWithMetadataChannel.setMessageHandler(nil)
    }
    let getPushWithMetadataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.getPushWithMetadata\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPushWithMetadataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicsArg = args[1] as! [String]
        api.getPushWithMetadata(inboxId: inboxIdArg, topics: topicsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPushWithMetadataChannel.setMessageHandler(nil)
    }
    /// 注销推送，注销或切换帐户时使用
    /// PS：删除installationId
    let deleteInstallationPushChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.deleteInstallationPush\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteInstallationPushChannel.setMessageHandler { _, reply in
        do {
          try api.deleteInstallationPush()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      deleteInstallationPushChannel.setMessageHandler(nil)
    }
    ///解密消息（用于推送接收等场景）
    let decodeMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.decodeMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      decodeMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let topicArg = args[1] as! String
        let encryptedMessageArg = args[2] as! String
        api.decodeMessage(inboxId: inboxIdArg, topic: topicArg, encryptedMessage: encryptedMessageArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      decodeMessageChannel.setMessageHandler(nil)
    }
    ///静音（取消订阅推送Topics）
    let unsubscribePushTopicsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribePushTopics\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribePushTopicsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let topicsArg = args[0] as! [String]
        do {
          try api.unsubscribePushTopics(topics: topicsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribePushTopicsChannel.setMessageHandler(nil)
    }
    let receiveSignatureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.receiveSignature\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      receiveSignatureChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestIdArg = args[0] as! String
        let signatureArg = args[1] as! String
        do {
          try api.receiveSignature(requestId: requestIdArg, signature: signatureArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      receiveSignatureChannel.setMessageHandler(nil)
    }
    let exportKeyBundleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.exportKeyBundle\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      exportKeyBundleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        api.exportKeyBundle(inboxId: inboxIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      exportKeyBundleChannel.setMessageHandler(nil)
    }
    ///是否可以使用群聊
    let canGroupMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.canGroupMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canGroupMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let peerAddressesArg = args[1] as! [String]
        api.canGroupMessage(inboxId: inboxIdArg, peerAddresses: peerAddressesArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      canGroupMessageChannel.setMessageHandler(nil)
    }
    ///创建群
    let createGroupChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.createGroup\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createGroupChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let peerAddressesArg = args[1] as! [String]
        let permissionArg = args[2] as! String
        let groupOptionsJsonArg = args[3] as! String
        api.createGroup(inboxId: inboxIdArg, peerAddresses: peerAddressesArg, permission: permissionArg, groupOptionsJson: groupOptionsJsonArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createGroupChannel.setMessageHandler(nil)
    }
    let findGroupChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.findGroup\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      findGroupChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        api.findGroup(inboxId: inboxIdArg, groupId: groupIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      findGroupChannel.setMessageHandler(nil)
    }
    let isAdminChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.isAdmin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isAdminChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let inboxIdArg = args[2] as! String
        api.isAdmin(clientInboxId: clientInboxIdArg, groupId: groupIdArg, inboxId: inboxIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isAdminChannel.setMessageHandler(nil)
    }
    let isSuperAdminChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.isSuperAdmin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isSuperAdminChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let inboxIdArg = args[2] as! String
        api.isSuperAdmin(clientInboxId: clientInboxIdArg, groupId: groupIdArg, inboxId: inboxIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isSuperAdminChannel.setMessageHandler(nil)
    }
    let updateGroupNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.updateGroupName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateGroupNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let groupNameArg = args[2] as! String
        api.updateGroupName(clientInboxId: clientInboxIdArg, groupId: groupIdArg, groupName: groupNameArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateGroupNameChannel.setMessageHandler(nil)
    }
    let updateGroupImageUrlSquareChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.updateGroupImageUrlSquare\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateGroupImageUrlSquareChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let groupImageUrlArg = args[2] as! String
        api.updateGroupImageUrlSquare(clientInboxId: clientInboxIdArg, groupId: groupIdArg, groupImageUrl: groupImageUrlArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateGroupImageUrlSquareChannel.setMessageHandler(nil)
    }
    let syncGroupChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.syncGroup\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      syncGroupChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        api.syncGroup(clientInboxId: clientInboxIdArg, groupId: groupIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      syncGroupChannel.setMessageHandler(nil)
    }
    let addGroupMembersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.addGroupMembers\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addGroupMembersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let peerAddressesArg = args[2] as! [String]
        api.addGroupMembers(clientInboxId: clientInboxIdArg, groupId: groupIdArg, peerAddresses: peerAddressesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addGroupMembersChannel.setMessageHandler(nil)
    }
    let addAdminChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.addAdmin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAdminChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let inboxIdArg = args[2] as! String
        api.addAdmin(clientInboxId: clientInboxIdArg, groupId: groupIdArg, inboxId: inboxIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addAdminChannel.setMessageHandler(nil)
    }
    let removeAdminChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.removeAdmin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAdminChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let inboxIdArg = args[2] as! String
        api.removeAdmin(clientInboxId: clientInboxIdArg, groupId: groupIdArg, inboxId: inboxIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      removeAdminChannel.setMessageHandler(nil)
    }
    let removeGroupMembersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.removeGroupMembers\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeGroupMembersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        let addressesArg = args[2] as! [String]
        api.removeGroupMembers(clientInboxId: clientInboxIdArg, groupId: groupIdArg, addresses: addressesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      removeGroupMembersChannel.setMessageHandler(nil)
    }
    let conversationConsentStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.conversationConsentState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      conversationConsentStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let conversationTopicArg = args[1] as! String
        api.conversationConsentState(clientInboxId: clientInboxIdArg, conversationTopic: conversationTopicArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      conversationConsentStateChannel.setMessageHandler(nil)
    }
    let groupConsentStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.halo_im.IMHostApi.groupConsentState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      groupConsentStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientInboxIdArg = args[0] as! String
        let groupIdArg = args[1] as! String
        api.groupConsentState(clientInboxId: clientInboxIdArg, groupId: groupIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      groupConsentStateChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol IMFlutterApiProtocol {
  ///用于测试
  func flutterApiTest(test testArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  ///新会话响应
  func onSubscribeToConversations(inboxId inboxIdArg: String, conversation conversationArg: IMConversation, completion: @escaping (Result<Void, PigeonError>) -> Void)
  ///会话新消息响应
  func onSubscribeToMessages(inboxId inboxIdArg: String, message messageArg: IMDecryptedMessage, completion: @escaping (Result<Void, PigeonError>) -> Void)
  ///所有新消息响应
  func onSubscribeToAllMessages(inboxId inboxIdArg: String, message messageArg: IMDecryptedMessage, completion: @escaping (Result<Void, PigeonError>) -> Void)
  ///消息签名
  func onSignMessage(requestId requestIdArg: String, message messageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class IMFlutterApi: IMFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: HaloIMPigeonCodec {
    return HaloIMPigeonCodec.shared
  }
  ///用于测试
  func flutterApiTest(test testArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.halo_im.IMFlutterApi.flutterApiTest\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([testArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  ///新会话响应
  func onSubscribeToConversations(inboxId inboxIdArg: String, conversation conversationArg: IMConversation, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToConversations\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([inboxIdArg, conversationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  ///会话新消息响应
  func onSubscribeToMessages(inboxId inboxIdArg: String, message messageArg: IMDecryptedMessage, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToMessages\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([inboxIdArg, messageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  ///所有新消息响应
  func onSubscribeToAllMessages(inboxId inboxIdArg: String, message messageArg: IMDecryptedMessage, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToAllMessages\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([inboxIdArg, messageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  ///消息签名
  func onSignMessage(requestId requestIdArg: String, message messageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSignMessage\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestIdArg, messageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
