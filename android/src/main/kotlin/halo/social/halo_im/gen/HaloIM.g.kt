// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Env(val raw: Int) {
  LOCAL(0),
  DEV(1),
  PRODUCTION(2);

  companion object {
    fun ofRaw(raw: Int): Env? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ClientData (
  val inboxID: String,
  val address: String,
  val installationID: String,
  val dbPath: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ClientData {
      val inboxID = pigeonVar_list[0] as String
      val address = pigeonVar_list[1] as String
      val installationID = pigeonVar_list[2] as String
      val dbPath = pigeonVar_list[3] as String
      return ClientData(inboxID, address, installationID, dbPath)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      inboxID,
      address,
      installationID,
      dbPath,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IMDecryptedMessage (
  val id: String,
  val topic: String,
  val contentTypeId: String,
  val content: Map<String?, Any?>,
  val senderAddress: String,
  val sent: Long,
  val deliveryStatus: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IMDecryptedMessage {
      val id = pigeonVar_list[0] as String
      val topic = pigeonVar_list[1] as String
      val contentTypeId = pigeonVar_list[2] as String
      val content = pigeonVar_list[3] as Map<String?, Any?>
      val senderAddress = pigeonVar_list[4] as String
      val sent = pigeonVar_list[5] as Long
      val deliveryStatus = pigeonVar_list[6] as String
      return IMDecryptedMessage(id, topic, contentTypeId, content, senderAddress, sent, deliveryStatus)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      topic,
      contentTypeId,
      content,
      senderAddress,
      sent,
      deliveryStatus,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IMConversation (
  val clientAddress: String,
  val topic: String,
  val peerAddress: String,
  val version: String,
  val createdAt: Long,
  val conversationID: String,
  val keyMaterial: String,
  val consentProof: String,
  val isAllowed: Boolean,
  val isDenied: Boolean,
  val groupName: String? = null,
  val groupDescription: String? = null,
  val groupId: String? = null,
  val groupIcon: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IMConversation {
      val clientAddress = pigeonVar_list[0] as String
      val topic = pigeonVar_list[1] as String
      val peerAddress = pigeonVar_list[2] as String
      val version = pigeonVar_list[3] as String
      val createdAt = pigeonVar_list[4] as Long
      val conversationID = pigeonVar_list[5] as String
      val keyMaterial = pigeonVar_list[6] as String
      val consentProof = pigeonVar_list[7] as String
      val isAllowed = pigeonVar_list[8] as Boolean
      val isDenied = pigeonVar_list[9] as Boolean
      val groupName = pigeonVar_list[10] as String?
      val groupDescription = pigeonVar_list[11] as String?
      val groupId = pigeonVar_list[12] as String?
      val groupIcon = pigeonVar_list[13] as String?
      return IMConversation(clientAddress, topic, peerAddress, version, createdAt, conversationID, keyMaterial, consentProof, isAllowed, isDenied, groupName, groupDescription, groupId, groupIcon)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      clientAddress,
      topic,
      peerAddress,
      version,
      createdAt,
      conversationID,
      keyMaterial,
      consentProof,
      isAllowed,
      isDenied,
      groupName,
      groupDescription,
      groupId,
      groupIcon,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IMMessageReq (
  val topic: String,
  val limit: Long? = null,
  val before: Long? = null,
  val after: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IMMessageReq {
      val topic = pigeonVar_list[0] as String
      val limit = pigeonVar_list[1] as Long?
      val before = pigeonVar_list[2] as Long?
      val after = pigeonVar_list[3] as Long?
      return IMMessageReq(topic, limit, before, after)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      topic,
      limit,
      before,
      after,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IMPushWithMetadata (
  val hmacKeys: List<IMPushHMACKeys?>,
  val topic: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IMPushWithMetadata {
      val hmacKeys = pigeonVar_list[0] as List<IMPushHMACKeys?>
      val topic = pigeonVar_list[1] as String
      return IMPushWithMetadata(hmacKeys, topic)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      hmacKeys,
      topic,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IMPushHMACKeys (
  val key: String,
  val key2: String,
  val thirtyDayPeriodsSinceEpoch: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IMPushHMACKeys {
      val key = pigeonVar_list[0] as String
      val key2 = pigeonVar_list[1] as String
      val thirtyDayPeriodsSinceEpoch = pigeonVar_list[2] as Long
      return IMPushHMACKeys(key, key2, thirtyDayPeriodsSinceEpoch)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      key,
      key2,
      thirtyDayPeriodsSinceEpoch,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ImGroup (
  val clientAddress: String,
  val id: String,
  val createdAt: Long,
  val version: String,
  val topic: String,
  val creatorInboxId: String,
  val isActive: Boolean,
  val addedByInboxId: String,
  val name: String,
  val imageUrlSquare: String,
  val description: String,
  val members: List<ImMember?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ImGroup {
      val clientAddress = pigeonVar_list[0] as String
      val id = pigeonVar_list[1] as String
      val createdAt = pigeonVar_list[2] as Long
      val version = pigeonVar_list[3] as String
      val topic = pigeonVar_list[4] as String
      val creatorInboxId = pigeonVar_list[5] as String
      val isActive = pigeonVar_list[6] as Boolean
      val addedByInboxId = pigeonVar_list[7] as String
      val name = pigeonVar_list[8] as String
      val imageUrlSquare = pigeonVar_list[9] as String
      val description = pigeonVar_list[10] as String
      val members = pigeonVar_list[11] as List<ImMember?>
      return ImGroup(clientAddress, id, createdAt, version, topic, creatorInboxId, isActive, addedByInboxId, name, imageUrlSquare, description, members)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      clientAddress,
      id,
      createdAt,
      version,
      topic,
      creatorInboxId,
      isActive,
      addedByInboxId,
      name,
      imageUrlSquare,
      description,
      members,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ImMember (
  val inboxId: String,
  val addresses: List<String?>,
  /**[member],[admin],[super_admin] */
  val permissionLevel: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ImMember {
      val inboxId = pigeonVar_list[0] as String
      val addresses = pigeonVar_list[1] as List<String?>
      val permissionLevel = pigeonVar_list[2] as String
      return ImMember(inboxId, addresses, permissionLevel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      inboxId,
      addresses,
      permissionLevel,
    )
  }
}
private open class HaloIMPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Env.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ClientData.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IMDecryptedMessage.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IMConversation.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IMMessageReq.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IMPushWithMetadata.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IMPushHMACKeys.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ImGroup.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ImMember.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Env -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is ClientData -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is IMDecryptedMessage -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is IMConversation -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is IMMessageReq -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is IMPushWithMetadata -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is IMPushHMACKeys -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is ImGroup -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is ImMember -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface IMHostApi {
  /**用于测试 */
  fun abc()
  fun createFromKeyBundle(keyBundle: String, environment: String, appVersion: String?, hasCreateIdentityCallback: Boolean?, hasEnableIdentityCallback: Boolean?, hasPreAuthenticateToInboxCallback: Boolean?, enableV3: Boolean?, dbEncryptionKey: ByteArray?, dbDirectory: String?, historySyncUrl: String?, callback: (Result<String>) -> Unit)
  fun auth(address: String, environment: String, appVersion: String?, hasCreateIdentityCallback: Boolean?, hasEnableIdentityCallback: Boolean?, hasPreAuthenticateToInboxCallback: Boolean?, enableV3: Boolean?, dbEncryptionKey: ByteArray?, dbDirectory: String?, historySyncUrl: String?, callback: (Result<String>) -> Unit)
  /**创建会话 */
  fun createConversation(inboxId: String, address: String, callback: (Result<IMConversation>) -> Unit)
  /**
   * 发送消息
   * TODO 目前只支持文字类型，其他类型还未支持
   */
  fun sendMessage(inboxId: String, topic: String, body: String, callback: (Result<String>) -> Unit)
  /**订阅新的会话 */
  fun subscribeToConversations(inboxId: String)
  /**取消订阅新的会话 */
  fun unsubscribeToConversations(inboxId: String)
  /**订阅会话新消息 */
  fun subscribeToMessages(inboxId: String, topic: String)
  /**取消订阅会话新消息 */
  fun unsubscribeToMessages(inboxId: String, topic: String)
  /**订阅所有会话新消息 */
  fun subscribeToAllMessages(inboxId: String)
  /**取消订阅所有会话新消息 */
  fun unsubscribeToAllMessages(inboxId: String)
  /**订阅所有群新消息 */
  fun subscribeToAllGroupMessages(inboxId: String)
  /**取消订阅所有群新消息 */
  fun unsubscribeToAllGroupMessages(inboxId: String)
  /**是否可以与[address]发消息 */
  fun canMessage(inboxId: String, address: String, callback: (Result<Boolean>) -> Unit)
  /**[address]是否激活 */
  fun staticCanMessage(address: String, appVersion: String, callback: (Result<Boolean>) -> Unit)
  /**获取会话列表 */
  fun conversationList(inboxId: String, callback: (Result<List<IMConversation>>) -> Unit)
  /**获取会话历史消息 */
  fun loadMessages(inboxId: String, topic: String, limit: Long?, before: Long?, after: Long?, direction: String?, callback: (Result<List<IMDecryptedMessage>>) -> Unit)
  fun loadBatchMessages(inboxId: String, topics: List<IMMessageReq>, direction: String?, callback: (Result<List<IMDecryptedMessage>>) -> Unit)
  fun allowContacts(inboxId: String, addresses: List<String>, callback: (Result<Unit>) -> Unit)
  fun denyContacts(inboxId: String, addresses: List<String>, callback: (Result<Unit>) -> Unit)
  fun isAllowed(inboxId: String, address: String, callback: (Result<Boolean>) -> Unit)
  fun isDenied(inboxId: String, address: String, callback: (Result<Boolean>) -> Unit)
  fun allowGroups(inboxId: String, groupIds: List<String>, callback: (Result<Unit>) -> Unit)
  fun denyGroups(inboxId: String, groupIds: List<String>, callback: (Result<Unit>) -> Unit)
  fun isGroupAllowed(inboxId: String, groupId: String, callback: (Result<Boolean>) -> Unit)
  fun isGroupDenied(inboxId: String, groupId: String, callback: (Result<Boolean>) -> Unit)
  fun refreshConsentList(inboxId: String)
  /**
   * 创建注册push
   * [token] device id
   * 返回 installationId
   */
  fun registerPushToken(pushServer: String, token: String, callback: (Result<String>) -> Unit)
  /**订阅推送Topics */
  fun subscribePushTopics(inboxId: String, topics: List<String>)
  /**订阅推送Topics */
  fun subscribePushWithMetadata(inboxId: String, topics: List<String>)
  fun getPushWithMetadata(inboxId: String, topics: List<String>, callback: (Result<List<IMPushWithMetadata>>) -> Unit)
  /**
   * 注销推送，注销或切换帐户时使用
   * PS：删除installationId
   */
  fun deleteInstallationPush()
  /**解密消息（用于推送接收等场景） */
  fun decodeMessage(inboxId: String, topic: String, encryptedMessage: String, callback: (Result<IMDecryptedMessage>) -> Unit)
  /**静音（取消订阅推送Topics） */
  fun unsubscribePushTopics(topics: List<String>)
  fun receiveSignature(requestId: String, signature: String)
  fun exportKeyBundle(inboxId: String, callback: (Result<String>) -> Unit)
  /**是否可以使用群聊 */
  fun canGroupMessage(inboxId: String, peerAddresses: List<String>, callback: (Result<Map<String, Boolean>>) -> Unit)
  /**创建群 */
  fun createGroup(inboxId: String, peerAddresses: List<String>, permission: String, groupOptionsJson: String, callback: (Result<ImGroup>) -> Unit)
  fun findGroup(inboxId: String, groupId: String, callback: (Result<ImGroup?>) -> Unit)
  fun isAdmin(clientInboxId: String, groupId: String, inboxId: String, callback: (Result<Boolean>) -> Unit)
  fun isSuperAdmin(clientInboxId: String, groupId: String, inboxId: String, callback: (Result<Boolean>) -> Unit)
  fun updateGroupName(clientInboxId: String, groupId: String, groupName: String, callback: (Result<Unit>) -> Unit)
  fun updateGroupImageUrlSquare(clientInboxId: String, groupId: String, groupImageUrl: String, callback: (Result<Unit>) -> Unit)
  fun syncGroup(clientInboxId: String, groupId: String, callback: (Result<Unit>) -> Unit)
  fun addGroupMembers(clientInboxId: String, groupId: String, peerAddresses: List<String>, callback: (Result<Unit>) -> Unit)
  fun addAdmin(clientInboxId: String, groupId: String, inboxId: String, callback: (Result<Unit>) -> Unit)
  fun removeAdmin(clientInboxId: String, groupId: String, inboxId: String, callback: (Result<Unit>) -> Unit)
  fun removeGroupMembers(clientInboxId: String, groupId: String, addresses: List<String>, callback: (Result<Unit>) -> Unit)
  fun conversationConsentState(clientInboxId: String, conversationTopic: String, callback: (Result<String>) -> Unit)
  fun groupConsentState(clientInboxId: String, groupId: String, callback: (Result<String>) -> Unit)

  companion object {
    /** The codec used by IMHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      HaloIMPigeonCodec()
    }
    /** Sets up an instance of `IMHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: IMHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.abc$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.abc()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.createFromKeyBundle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyBundleArg = args[0] as String
            val environmentArg = args[1] as String
            val appVersionArg = args[2] as String?
            val hasCreateIdentityCallbackArg = args[3] as Boolean?
            val hasEnableIdentityCallbackArg = args[4] as Boolean?
            val hasPreAuthenticateToInboxCallbackArg = args[5] as Boolean?
            val enableV3Arg = args[6] as Boolean?
            val dbEncryptionKeyArg = args[7] as ByteArray?
            val dbDirectoryArg = args[8] as String?
            val historySyncUrlArg = args[9] as String?
            api.createFromKeyBundle(keyBundleArg, environmentArg, appVersionArg, hasCreateIdentityCallbackArg, hasEnableIdentityCallbackArg, hasPreAuthenticateToInboxCallbackArg, enableV3Arg, dbEncryptionKeyArg, dbDirectoryArg, historySyncUrlArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.auth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val environmentArg = args[1] as String
            val appVersionArg = args[2] as String?
            val hasCreateIdentityCallbackArg = args[3] as Boolean?
            val hasEnableIdentityCallbackArg = args[4] as Boolean?
            val hasPreAuthenticateToInboxCallbackArg = args[5] as Boolean?
            val enableV3Arg = args[6] as Boolean?
            val dbEncryptionKeyArg = args[7] as ByteArray?
            val dbDirectoryArg = args[8] as String?
            val historySyncUrlArg = args[9] as String?
            api.auth(addressArg, environmentArg, appVersionArg, hasCreateIdentityCallbackArg, hasEnableIdentityCallbackArg, hasPreAuthenticateToInboxCallbackArg, enableV3Arg, dbEncryptionKeyArg, dbDirectoryArg, historySyncUrlArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.createConversation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val addressArg = args[1] as String
            api.createConversation(inboxIdArg, addressArg) { result: Result<IMConversation> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.sendMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicArg = args[1] as String
            val bodyArg = args[2] as String
            api.sendMessage(inboxIdArg, topicArg, bodyArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToConversations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.subscribeToConversations(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToConversations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.unsubscribeToConversations(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.subscribeToMessages(inboxIdArg, topicArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.unsubscribeToMessages(inboxIdArg, topicArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToAllMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.subscribeToAllMessages(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToAllMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.unsubscribeToAllMessages(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.subscribeToAllGroupMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.subscribeToAllGroupMessages(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribeToAllGroupMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.unsubscribeToAllGroupMessages(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.canMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val addressArg = args[1] as String
            api.canMessage(inboxIdArg, addressArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.staticCanMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val appVersionArg = args[1] as String
            api.staticCanMessage(addressArg, appVersionArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.conversationList$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            api.conversationList(inboxIdArg) { result: Result<List<IMConversation>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.loadMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicArg = args[1] as String
            val limitArg = args[2] as Long?
            val beforeArg = args[3] as Long?
            val afterArg = args[4] as Long?
            val directionArg = args[5] as String?
            api.loadMessages(inboxIdArg, topicArg, limitArg, beforeArg, afterArg, directionArg) { result: Result<List<IMDecryptedMessage>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.loadBatchMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicsArg = args[1] as List<IMMessageReq>
            val directionArg = args[2] as String?
            api.loadBatchMessages(inboxIdArg, topicsArg, directionArg) { result: Result<List<IMDecryptedMessage>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.allowContacts$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val addressesArg = args[1] as List<String>
            api.allowContacts(inboxIdArg, addressesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.denyContacts$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val addressesArg = args[1] as List<String>
            api.denyContacts(inboxIdArg, addressesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.isAllowed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val addressArg = args[1] as String
            api.isAllowed(inboxIdArg, addressArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.isDenied$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val addressArg = args[1] as String
            api.isDenied(inboxIdArg, addressArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.allowGroups$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val groupIdsArg = args[1] as List<String>
            api.allowGroups(inboxIdArg, groupIdsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.denyGroups$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val groupIdsArg = args[1] as List<String>
            api.denyGroups(inboxIdArg, groupIdsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.isGroupAllowed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            api.isGroupAllowed(inboxIdArg, groupIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.isGroupDenied$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            api.isGroupDenied(inboxIdArg, groupIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.refreshConsentList$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.refreshConsentList(inboxIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.registerPushToken$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pushServerArg = args[0] as String
            val tokenArg = args[1] as String
            api.registerPushToken(pushServerArg, tokenArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.subscribePushTopics$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicsArg = args[1] as List<String>
            val wrapped: List<Any?> = try {
              api.subscribePushTopics(inboxIdArg, topicsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.subscribePushWithMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicsArg = args[1] as List<String>
            val wrapped: List<Any?> = try {
              api.subscribePushWithMetadata(inboxIdArg, topicsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.getPushWithMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicsArg = args[1] as List<String>
            api.getPushWithMetadata(inboxIdArg, topicsArg) { result: Result<List<IMPushWithMetadata>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.deleteInstallationPush$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.deleteInstallationPush()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.decodeMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val topicArg = args[1] as String
            val encryptedMessageArg = args[2] as String
            api.decodeMessage(inboxIdArg, topicArg, encryptedMessageArg) { result: Result<IMDecryptedMessage> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.unsubscribePushTopics$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val topicsArg = args[0] as List<String>
            val wrapped: List<Any?> = try {
              api.unsubscribePushTopics(topicsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.receiveSignature$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestIdArg = args[0] as String
            val signatureArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.receiveSignature(requestIdArg, signatureArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.exportKeyBundle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            api.exportKeyBundle(inboxIdArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.canGroupMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val peerAddressesArg = args[1] as List<String>
            api.canGroupMessage(inboxIdArg, peerAddressesArg) { result: Result<Map<String, Boolean>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.createGroup$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val peerAddressesArg = args[1] as List<String>
            val permissionArg = args[2] as String
            val groupOptionsJsonArg = args[3] as String
            api.createGroup(inboxIdArg, peerAddressesArg, permissionArg, groupOptionsJsonArg) { result: Result<ImGroup> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.findGroup$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val inboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            api.findGroup(inboxIdArg, groupIdArg) { result: Result<ImGroup?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.isAdmin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val inboxIdArg = args[2] as String
            api.isAdmin(clientInboxIdArg, groupIdArg, inboxIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.isSuperAdmin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val inboxIdArg = args[2] as String
            api.isSuperAdmin(clientInboxIdArg, groupIdArg, inboxIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.updateGroupName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val groupNameArg = args[2] as String
            api.updateGroupName(clientInboxIdArg, groupIdArg, groupNameArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.updateGroupImageUrlSquare$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val groupImageUrlArg = args[2] as String
            api.updateGroupImageUrlSquare(clientInboxIdArg, groupIdArg, groupImageUrlArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.syncGroup$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            api.syncGroup(clientInboxIdArg, groupIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.addGroupMembers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val peerAddressesArg = args[2] as List<String>
            api.addGroupMembers(clientInboxIdArg, groupIdArg, peerAddressesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.addAdmin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val inboxIdArg = args[2] as String
            api.addAdmin(clientInboxIdArg, groupIdArg, inboxIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.removeAdmin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val inboxIdArg = args[2] as String
            api.removeAdmin(clientInboxIdArg, groupIdArg, inboxIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.removeGroupMembers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            val addressesArg = args[2] as List<String>
            api.removeGroupMembers(clientInboxIdArg, groupIdArg, addressesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.conversationConsentState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val conversationTopicArg = args[1] as String
            api.conversationConsentState(clientInboxIdArg, conversationTopicArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.halo_im.IMHostApi.groupConsentState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientInboxIdArg = args[0] as String
            val groupIdArg = args[1] as String
            api.groupConsentState(clientInboxIdArg, groupIdArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class IMFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by IMFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      HaloIMPigeonCodec()
    }
  }
  /**用于测试 */
  fun flutterApiTest(testArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.halo_im.IMFlutterApi.flutterApiTest$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(testArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /**新会话响应 */
  fun onSubscribeToConversations(inboxIdArg: String, conversationArg: IMConversation, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToConversations$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(inboxIdArg, conversationArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /**会话新消息响应 */
  fun onSubscribeToMessages(inboxIdArg: String, messageArg: IMDecryptedMessage, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToMessages$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(inboxIdArg, messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /**所有新消息响应 */
  fun onSubscribeToAllMessages(inboxIdArg: String, messageArg: IMDecryptedMessage, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSubscribeToAllMessages$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(inboxIdArg, messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /**消息签名 */
  fun onSignMessage(requestIdArg: String, messageArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.halo_im.IMFlutterApi.onSignMessage$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(requestIdArg, messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
